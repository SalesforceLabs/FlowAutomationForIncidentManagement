<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>56.0</apiVersion>
    <decisions>
        <name>Check_Incident_Status</name>
        <label>Check Incident Status</label>
        <locationX>886</locationX>
        <locationY>431</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>isNew</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Incident_Status.Outputs.incidentStatus</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>New</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>FirstResponseStage</targetReference>
            </connector>
            <label>New (First Response)</label>
        </rules>
        <rules>
            <name>isOpen</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Incident_Status.Outputs.incidentStatus</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Open</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>QualificationStage</targetReference>
            </connector>
            <label>Open</label>
        </rules>
        <rules>
            <name>isInProgress</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Incident_Status.Outputs.incidentStatus</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>In Progress</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>NotificationInProgressStage</targetReference>
            </connector>
            <label>InProgress</label>
        </rules>
        <rules>
            <name>isResolved</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Incident_Status.Outputs.incidentStatus</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Resolved</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ResolutionStage</targetReference>
            </connector>
            <label>Resolved</label>
        </rules>
        <rules>
            <name>isEscalated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Incident_Status.Outputs.incidentStatus</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Escalated</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Escalated</targetReference>
            </connector>
            <label>Escalated</label>
        </rules>
        <rules>
            <name>isCompleted</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Incident_Status.Outputs.incidentStatus</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ClosureStage</targetReference>
            </connector>
            <label>Completed</label>
        </rules>
        <rules>
            <name>isClosed</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Incident_Status.Outputs.incidentStatus</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Closed</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ClosureStage</targetReference>
            </connector>
            <label>Closed</label>
        </rules>
    </decisions>
    <environments>Default</environments>
    <interviewLabel>AIM - Incident Orchestration {!$Flow.CurrentDateTime}</interviewLabel>
    <label>AIM - Incident Orchestration</label>
    <orchestratedStages>
        <name>ClosureStage</name>
        <label>Closure Stage</label>
        <locationX>886</locationX>
        <locationY>827</locationY>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <name>Set_Closure_Milestone</name>
            <actionName>AIM_UpdateMilestone</actionName>
            <actionType>stepBackground</actionType>
            <entryConditionLogic>and</entryConditionLogic>
            <inputParameters>
                <name>markComplete</name>
                <value>
                    <booleanValue>true</booleanValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>milestoneName</name>
                <value>
                    <stringValue>Incident closed</stringValue>
                </value>
            </inputParameters>
            <label>Set Closure Milestone</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>Escalated</name>
        <label>Escalated</label>
        <locationX>1106</locationX>
        <locationY>551</locationY>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>Refresh_Incident_Status</targetReference>
        </connector>
        <exitActionInputParameters>
            <name>isCheckEquality</name>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </exitActionInputParameters>
        <exitActionInputParameters>
            <name>incidentId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </exitActionInputParameters>
        <exitActionInputParameters>
            <name>statusValue</name>
            <value>
                <stringValue>Escalated</stringValue>
            </value>
        </exitActionInputParameters>
        <exitActionName>AIM_Status_Evaluation</exitActionName>
        <exitActionType>evaluationFlow</exitActionType>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <name>Email_Incident_Owner</name>
            <actionName>AIM_EscalationFlow</actionName>
            <actionType>stepBackground</actionType>
            <entryConditionLogic>and</entryConditionLogic>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Email Incident Owner</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>FirstResponseStage</name>
        <label>First Response Stage</label>
        <locationX>50</locationX>
        <locationY>551</locationY>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>Refresh_Incident_Status</targetReference>
        </connector>
        <exitActionInputParameters>
            <name>incidentId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </exitActionInputParameters>
        <exitActionInputParameters>
            <name>isCheckEquality</name>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </exitActionInputParameters>
        <exitActionInputParameters>
            <name>statusValue</name>
            <value>
                <stringValue>New</stringValue>
            </value>
        </exitActionInputParameters>
        <exitActionName>AIM_Status_Evaluation</exitActionName>
        <exitActionType>evaluationFlow</exitActionType>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <name>Flow_First_Response</name>
            <actionName>AIM_Stage_Flow_First_Response</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <stringValue>AIM_FirstResponse</stringValue>
                </assignee>
                <assigneeType>Queue</assigneeType>
            </assignees>
            <entryConditionLogic>and</entryConditionLogic>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>First Response Flow</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Update_First_Response_Milestone</name>
            <actionName>AIM_UpdateMilestone</actionName>
            <actionType>stepBackground</actionType>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <leftValueReference>Flow_First_Response.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <inputParameters>
                <name>markComplete</name>
                <value>
                    <booleanValue>true</booleanValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>milestoneName</name>
                <value>
                    <stringValue>Incident first response</stringValue>
                </value>
            </inputParameters>
            <label>Update First Response Milestone</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Update_Status_to_Open</name>
            <actionName>AIM_UpdateIncidentStatus</actionName>
            <actionType>stepBackground</actionType>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <leftValueReference>Update_First_Response_Milestone.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>statusFrom</name>
                <value>
                    <stringValue>New</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>statusTo</name>
                <value>
                    <stringValue>Open</stringValue>
                </value>
            </inputParameters>
            <label>Update Status to Open</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>NotificationInProgressStage</name>
        <label>Notification Stage</label>
        <locationX>578</locationX>
        <locationY>551</locationY>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>Refresh_Incident_Status</targetReference>
        </connector>
        <exitActionInputParameters>
            <name>incidentId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </exitActionInputParameters>
        <exitActionInputParameters>
            <name>isCheckEquality</name>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </exitActionInputParameters>
        <exitActionInputParameters>
            <name>statusValue</name>
            <value>
                <stringValue>In Progress</stringValue>
            </value>
        </exitActionInputParameters>
        <exitActionName>AIM_Status_Evaluation</exitActionName>
        <exitActionType>evaluationFlow</exitActionType>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <name>Flow_Notification</name>
            <actionName>AIM_Stage_Flow_Automation</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <stringValue>AIM_Notification</stringValue>
                </assignee>
                <assigneeType>Queue</assigneeType>
            </assignees>
            <entryConditionLogic>and</entryConditionLogic>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Notification Flow</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Update_Notification_Milestone</name>
            <actionName>AIM_UpdateMilestone</actionName>
            <actionType>stepBackground</actionType>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <leftValueReference>Flow_Notification.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <inputParameters>
                <name>markComplete</name>
                <value>
                    <booleanValue>true</booleanValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>milestoneName</name>
                <value>
                    <stringValue>Incident notification and deflection</stringValue>
                </value>
            </inputParameters>
            <label>Update Notification Milestone</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Update_Investigation_Milestone</name>
            <actionName>AIM_UpdateMilestone</actionName>
            <actionType>stepBackground</actionType>
            <entryConditionLogic>and</entryConditionLogic>
            <inputParameters>
                <name>markComplete</name>
                <value>
                    <booleanValue>true</booleanValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>milestoneName</name>
                <value>
                    <stringValue>Incident investigation started</stringValue>
                </value>
            </inputParameters>
            <label>Update Investigation Milestone</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>QualificationStage</name>
        <label>Qualification Stage</label>
        <locationX>314</locationX>
        <locationY>551</locationY>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>Refresh_Incident_Status</targetReference>
        </connector>
        <exitActionInputParameters>
            <name>isCheckEquality</name>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </exitActionInputParameters>
        <exitActionInputParameters>
            <name>incidentId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </exitActionInputParameters>
        <exitActionInputParameters>
            <name>statusValue</name>
            <value>
                <stringValue>Open</stringValue>
            </value>
        </exitActionInputParameters>
        <exitActionName>AIM_Status_Evaluation</exitActionName>
        <exitActionType>evaluationFlow</exitActionType>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <name>Flow_Qualification</name>
            <actionName>AIM_QualificationScreenFlow</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <stringValue>AIM_Qualification</stringValue>
                </assignee>
                <assigneeType>Queue</assigneeType>
            </assignees>
            <entryConditionLogic>and</entryConditionLogic>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Qualification Flow</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Update_Qualification_Milestone</name>
            <actionName>AIM_UpdateMilestone</actionName>
            <actionType>stepBackground</actionType>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <leftValueReference>Flow_Qualification.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <inputParameters>
                <name>markComplete</name>
                <value>
                    <booleanValue>true</booleanValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>milestoneName</name>
                <value>
                    <stringValue>Incident qualification</stringValue>
                </value>
            </inputParameters>
            <label>Update Qualification Milestone</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Update_Status_to_In_Progress</name>
            <actionName>AIM_UpdateIncidentStatus</actionName>
            <actionType>stepBackground</actionType>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <leftValueReference>Update_Qualification_Milestone.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>statusFrom</name>
                <value>
                    <stringValue>Open</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>statusTo</name>
                <value>
                    <stringValue>In Progress</stringValue>
                </value>
            </inputParameters>
            <label>Update Status to In Progress</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>Refresh_Incident_Status</name>
        <label>Refresh Incident Status</label>
        <locationX>886</locationX>
        <locationY>311</locationY>
        <connector>
            <targetReference>Check_Incident_Status</targetReference>
        </connector>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <name>Get_Incident_Status</name>
            <actionName>AIM_GetIncidentStatus</actionName>
            <actionType>stepBackground</actionType>
            <entryConditionLogic>and</entryConditionLogic>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Get Incident Status</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>ResolutionStage</name>
        <label>Resolution Stage</label>
        <locationX>842</locationX>
        <locationY>551</locationY>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>Refresh_Incident_Status</targetReference>
        </connector>
        <exitActionInputParameters>
            <name>isCheckEquality</name>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </exitActionInputParameters>
        <exitActionInputParameters>
            <name>incidentId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </exitActionInputParameters>
        <exitActionInputParameters>
            <name>statusValue</name>
            <value>
                <stringValue>Resolved</stringValue>
            </value>
        </exitActionInputParameters>
        <exitActionName>AIM_Status_Evaluation</exitActionName>
        <exitActionType>evaluationFlow</exitActionType>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <name>Flow_Completion</name>
            <actionName>AIM_Stage_Flow_Automation</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <stringValue>AIM_Completion</stringValue>
                </assignee>
                <assigneeType>Queue</assigneeType>
            </assignees>
            <entryConditionLogic>and</entryConditionLogic>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Completion Flow</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Update_Status_to_Completed</name>
            <actionName>AIM_UpdateIncidentStatus</actionName>
            <actionType>stepBackground</actionType>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <leftValueReference>Flow_Completion.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <inputParameters>
                <name>incidentId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>statusFrom</name>
                <value>
                    <stringValue>Resolved</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>statusTo</name>
                <value>
                    <stringValue>Completed</stringValue>
                </value>
            </inputParameters>
            <label>Update Status to Completed</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Orchestrator</processType>
    <start>
        <locationX>760</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Refresh_Incident_Status</targetReference>
        </connector>
        <object>Incident</object>
        <recordTriggerType>Create</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Draft</status>
</Flow>
